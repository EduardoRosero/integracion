package splines;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Alejandra
 */
public class PantallaSplinesCubicos extends javax.swing.JFrame {

    /**
     * Creates new form PantallaSplinesCubicos
     */
    DecimalFormat decimal = new DecimalFormat("#.###");
    ArrayList<Puntos> puntos = new ArrayList<Puntos>();
    String[] cabecera;
    private int n = 0;
    TableModel matriz = null;
    double[][] matrizTridiagonal;
    double vectorValoresH[];//Para calcular el resto de valores
    double vectorValoresA[];
    double vectorValoresB[];
    double[] vectorValoresC;
    double[] vectorValoresD;

    public PantallaSplinesCubicos() {
        initComponents();
        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
        int height = pantalla.height;
        int width = pantalla.width;
        setLocationRelativeTo(null);
        setVisible(true);
        jTextField1.setText("");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        matrizDatos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("INGRESAR PUNTOS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Numero de puntos");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jButton2.setText("CARGAR MATRIZ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("SOLUCIÓN");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addGap(35, 35, 35)))
                    .addContainerGap(30, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(232, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(62, 62, 62)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jButton1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(48, Short.MAX_VALUE)))
        );

        matrizDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(matrizDatos);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("FUNCIÓN INTERPOLANTE"));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("INTERPOLAR"));

        jLabel2.setText("INGRESE VALOR DE X:");

        jButton4.setText("INTERPOLAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField2)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(26, 26, 26))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(292, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextArea1.setText("");
        puntos.clear();
        try {
            String token;
            n = Integer.parseInt(jTextField1.getText());
            for (int i = 0; i < n; i++) {
                Puntos pp;
                token = null;
                token = JOptionPane.showInputDialog("Ingrese punto x;y");
                String punto[] = token.split(";");
                double x = Double.parseDouble(punto[0]);
                double y = Double.parseDouble(punto[1]);
                if (i != 0) {
                    if (verificarRepeticion(puntos, x)) {
                        if (verificarOrden(puntos, x)) {
                            pp = new Puntos(x, y);
                            puntos.add(pp);
                            jTextArea1.append("( " + token + " )\r\n");
                        } else {
                            JOptionPane.showMessageDialog(null, "Los puntos deben ingresarse \n de manera ordenada", "Alerta", JOptionPane.INFORMATION_MESSAGE);
                            i--;
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede ingresar dos\n veces el mismo valor para x", "Alerta", JOptionPane.INFORMATION_MESSAGE);
                        i--;
                    }
                } else {
                    pp = new Puntos(x, y);
                    puntos.add(pp);
                    jTextArea1.append("( " + token + " )\r\n");

                }

            }

            for (int i = 0; i < n; i++) {
                System.out.println(puntos.get(i).toString());
            }

            cabecera = new String[n + 1];
            for (int i = 0; i < cabecera.length; i++) {
                cabecera[i] = String.valueOf(i + 1);
            }
        } catch (NumberFormatException formato) {
            JOptionPane.showMessageDialog(null, "Error en el ingreso de datos", "Alerta", JOptionPane.INFORMATION_MESSAGE);
        } catch (ArrayIndexOutOfBoundsException arr) {
            JOptionPane.showMessageDialog(null, "No se ha realizado el ingreso \n de datos de manera correcta.", "Alerta", JOptionPane.INFORMATION_MESSAGE);
        }
        jTextField1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            matrizTridiagonal = new double[puntos.size()][puntos.size() + 1];
            matrizTridiagonal = llenarMatriz(puntos);
            llenarTabla(matrizTridiagonal);
        } catch (NegativeArraySizeException e) {
            JOptionPane.showMessageDialog(null, "No se ha realizado el ingreso de datos.\nNo se puede continuar con el calculo.", "Alerta", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        try {
            FactorizacionCrout fc = new FactorizacionCrout();
            vectorValoresC = new double[matrizDatos.getRowCount()];
            vectorValoresB = new double[matrizDatos.getRowCount()];
            vectorValoresD = new double[matrizDatos.getRowCount()];
            vectorValoresC = fc.metodoCrout(matrizTridiagonal);
            vectorValoresB = hallarValoresB(vectorValoresA, vectorValoresH, vectorValoresC);
            vectorValoresD = hallarValoresD(vectorValoresH, vectorValoresC);
            for (int i = 0; i < vectorValoresD.length - 1; i++) {
                jTextArea2.append("S" + i + " = " + decimal.format(vectorValoresA[i]) + " + "
                        + decimal.format(vectorValoresB[i]) + " ( x - " + puntos.get(i).getX() + " ) " + " + "
                        + decimal.format(vectorValoresC[i]) + " ( x - " + puntos.get(i).getX() + " ) ^" + 2 + " + "
                        + decimal.format(vectorValoresD[i]) + " ( x - " + puntos.get(i).getX() + " ) ^" + 3 + "\n"
                );

            }
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "No se ha realizado el ingreso de datos.\nNo se puede continuar con el calculo.", "Alerta", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            double x = Double.parseDouble(jTextField2.getText());
            jTextField3.setText(decimal.format(interpolacionSplinesCubiocos(vectorValoresA, vectorValoresB, vectorValoresC, vectorValoresD, x)) + "");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private double interpolacionSplinesCubiocos(double a[], double b[], double c[], double d[], double x) {
        int n = a.length - 1, k = 0;
        double sx = 0, xx = 0, bb = 0, cc = 0, dd = 0;
        int cont = 0;
        while (k < n) {
            if ((x >= puntos.get(k).getX()) && (x <= puntos.get(k + 1).getX())) {
                xx = (x - puntos.get(k).getX());
                bb = b[k] * xx;
                cc = c[k] * Math.pow(xx, 2);
                dd = d[k] * Math.pow(xx, 3);
                sx = a[k] + bb + cc + dd;
                System.out.println("x " + xx + " a " + a[k] + " b " + bb + " c " + cc + " d " + dd);
                k = n;
            } else {
                cont++;
            }
            k++;
        }
        if (cont != n) {
            JOptionPane.showMessageDialog(null, "Cálculo realizado con exito.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return sx;
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo calcular.\nEl valor ingresado no está dentro\nde ningún intervalo de\ninterpolación.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return 0;
        }
    }

    /**
     * Metodo que oermite calcular los valores que se cargaran en la matriz,
     * para continuar con el procedimiento de spllines cubicos.
     *
     * @param datos
     * @return
     */
    private double[][] llenarMatriz(ArrayList<Puntos> datos) {
        vectorValoresH = new double[datos.size() - 1];
        vectorValoresH = hallarValoresH(datos);  //Envio de parametro el ArrayList de Puntos
        double[][] matrizTridiagonal = new double[datos.size()][datos.size() + 1];

        /*Enceramos la matriz*/
        for (int i = 0; i < matrizTridiagonal.length; i++) {
            for (int j = 0; j <= matrizTridiagonal.length; j++) {
                matrizTridiagonal[i][j] = 0d;
            }
        }
        matrizTridiagonal[0][0] = 1d; //Asignamos 1 al inicio de la matriz
        matrizTridiagonal[matrizTridiagonal.length - 1][matrizTridiagonal.length - 1] = 1d; //Asignamos 1 al inicio y al final de ma matriz

        for (int i = 1; i < matrizTridiagonal.length - 1; i++) {
            matrizTridiagonal[i][i] = (2 * (vectorValoresH[i - 1] + vectorValoresH[i]));
            matrizTridiagonal[i][i - 1] = (vectorValoresH[i - 1]);
            matrizTridiagonal[i][i + 1] = (vectorValoresH[i]);
        }

        double[] vectorB = llenarVectorB(datos, vectorValoresH);
        for (int i = 0; i < matrizTridiagonal.length; i++) {
            matrizTridiagonal[i][matrizTridiagonal.length] = vectorB[i];
        }
        return matrizTridiagonal;
    }

    /**
     * Llena una matriz auxiliar con los valores cargados a la tabla, para
     * calcular el resto de componentes necesarios, para resolver la
     * interpolacion por splines cubicos.
     *
     * @return
     */
    private void llenarTabla(double[][] matrizA) {
        TableColumnModel columnModel;
        String rowData[] = new String[matrizA.length];
        String colNames[] = new String[matrizA.length + 1];
        for (int i = 0; i < colNames.length; i++) {
            colNames[i] = "" + i;
        }
        TableModel modelo1 = new DefaultTableModel(colNames, colNames.length);
        for (int i = 0; i < colNames.length - 1; i++) {
            for (int j = 0; j < colNames.length; j++) {
                //modelo1.setValueAt(matrizA[i][j], i, j);
                modelo1.setValueAt(String.valueOf(matrizA[i][j]), i, j);
            }
        }
        matrizDatos.setModel(modelo1);
        matrizDatos.setIntercellSpacing(new Dimension(4, 4));
        matrizDatos.setRowMargin(2);
        matrizDatos.setSelectionBackground(Color.LIGHT_GRAY);
        matrizDatos.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        for (int i = 0; i < colNames.length; i++) {
            columnModel = matrizDatos.getColumnModel();
            columnModel.getColumn(i).setPreferredWidth(40);
            columnModel.getColumn(i).setMinWidth(40);
            columnModel.getColumn(i).setMaxWidth(40);
            matrizDatos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        }

    }

    public double[] hallarValoresH(ArrayList<Puntos> datos) {
        double h[] = new double[datos.size() - 1];
        for (int i = 0; i < h.length; i++) {
            h[i] = (datos.get(i + 1).getX() - datos.get(i).getX());
        }
        return h;
    }

    public double[] hallarValoresA(ArrayList<Puntos> datos) {
        double a[] = new double[datos.size()];
        for (int i = 0; i < a.length; i++) {
            a[i] = (datos.get(i).getY());
        }
        return a;
    }

    public double[] hallarValoresB(double a[], double h[], double c[]) {
        double aux[] = new double[a.length];
        for (int i = 0; i < aux.length - 1; i++) {
            double t1 = (a[i + 1] - a[i]) / h[i];
            double t2 = (h[i] / 3) * ((2 * c[i]) + c[i + 1]);
            aux[i] = t1 - t2;
        }
        return aux;
    }

    public double[] hallarValoresD(double h[], double c[]) {
        double aux[] = new double[c.length];
        for (int i = 0; i < aux.length - 1; i++) {
            aux[i] = (c[i + 1] - c[i]) / (3 * h[i]);
        }
        return aux;
    }

    public double[] llenarVectorB(ArrayList<Puntos> datos, double h[]) {
        double b[] = new double[datos.size()];
        vectorValoresA = new double[datos.size()];
        vectorValoresA = hallarValoresA(datos);
        b[0] = b[datos.size() - 1] = 0d;
        for (int i = 1; i < b.length - 1; i++) {
            b[i] = ((3 / h[i]) * (vectorValoresA[i + 1] - vectorValoresA[i])) - ((3 / h[i - 1]) * (vectorValoresA[i] - vectorValoresA[i - 1]));
        }
        return b;
    }

    /**
     * Metodo que permite verificar si entre los datos ingresados hay puntos
     * repetidos.
     *
     * @param puntos
     * @param x
     * @return
     */
    public boolean verificarRepeticion(ArrayList<Puntos> puntos, double x) {
        int repeticion = 0;
        try {

            for (int i = 0; i < puntos.size(); i++) {
                if (x == puntos.get(i).getX()) {
                    repeticion++;
                }

            }
        } catch (IndexOutOfBoundsException e) {
        }
        if (repeticion != 0) {
            return false;
        } else {
            return true;
        }

    }

    /**
     * Permite verificar si los datos ingresados corresponden a puntos en roden
     * ascendente en el la coordenada x.
     *
     * @param puntos
     * @param x
     * @return
     */
    public boolean verificarOrden(ArrayList<Puntos> puntos, double x) {
        int repeticion = 0;
        try {

            for (int i = 0; i < puntos.size(); i++) {
                if (x <= puntos.get(i).getX()) {
                    repeticion++;
                }

            }
        } catch (IndexOutOfBoundsException e) {
        }
        if (repeticion != 0) {
            return false;
        } else {
            return true;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaSplinesCubicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaSplinesCubicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaSplinesCubicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaSplinesCubicos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaSplinesCubicos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTable matrizDatos;
    // End of variables declaration//GEN-END:variables
}
